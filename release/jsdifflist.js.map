{"version":3,"sources":["../src/jsdifflist.js"],"names":["chalk","require","Table","isEqual","escapeHtml","equalityType","values","opts","length","Error","result","colorHint","objdiff","objs","allKeys","Set","Object","keys","sortKeys","sort","map","assign","key","obj","arraydiff","arrs","allIndexes","Array","Math","max","arr","fill","x","i","index","diff","comparands","every","c","isArray","some","module","exports","a","b","numberFormat","n","labels","formatValue","v","replace","results","defineProperties","toString","isEnumerable","value","t","cell","newRow","green","yellow","red","toHtml","d","join"],"mappings":"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","file":"jsdifflist.js","sourcesContent":["'use strict';\n\nconst chalk = require('chalk');\nconst Table = require('easy-table');\nconst isEqual = require('is-equal');\nconst escapeHtml = require('escape-html');\n\nfunction equalityType(values, opts = {}) {\n    if(values.length !== 2) throw new Error('Currently, only comparison between two objects is supported.');\n    if(values[0] === values[1]) return { values, result: 'strict', colorHint: 'green' };\n    if(values[0] == values[1]) return { values, result: 'loose', colorHint: 'yellow' };\n    if(isEqual(values[0], values[1])) return { values, result: 'conceptual', colorHint: 'yellow' };\n    return { values, result: 'unequal', colorHint: 'red' };\n}\n\nfunction objdiff(objs, opts = {}) {\n    if(objs.length !== 2) throw new Error('Currently, only comparison between two objects is supported.');\n    // TODO: (enhancement) diff Map and Set objects\n    // TODO: (enhancement) Symbol properties\n    // TODO: (enhancement) option to include non-enumerable properties\n    // TODO: (enhancement) option to highlight/exclude prototype properties\n    let allKeys = [...new Set([...Object.keys(objs[0]), ...Object.keys(objs[1])])];\n    if(typeof opts.sortKeys === 'function') allKeys = allKeys.sort(opts.sortKeys);\n    if(opts.sortKeys) allKeys = allKeys.sort();\n\n    return allKeys.map(key => Object.assign({ key }, equalityType(objs.map(obj => obj[key]), opts)));\n}\n\nfunction arraydiff(arrs, opts = {}) {\n    if(arrs.length !== 2) throw new Error('Currently, only comparison between two arrays is supported.');\n    // possibly a more efficient way to do this?\n    const allIndexes = new Array(Math.max(...arrs.map(arr => arr.length))).fill(null).map((x, i) => i);\n    return allIndexes.map(index => Object.assign({ index }, equalityType(arrs.map(arr => arr[index]), opts)));\n}\n\nfunction diff(comparands, opts) {\n    if(comparands.every(c => c === null)) return equalityType(comparands, opts);\n    if(comparands.every(c => typeof c === 'object')) {\n        if(comparands.every(c => Array.isArray(c))) return arraydiff(comparands, opts);\n        if(comparands.some(c => Array.isArray(c))) return equalityType(comparands, opts);\n        return objdiff(comparands, opts);\n    }\n    return equalityType(comparands, opts);\n}\n\n\nmodule.exports = function(a, b, opts = {}) {\n    if(typeof opts.numberFormat !== 'function') opts.numberFormat = n => n;\n    if(!opts.labels) opts.labels = ['Object A', 'Object B'];\n\n    function formatValue(v) {\n        if(v === null) return 'null'; // avoid JavaScript's brain-dead 'typeof' behavior wrt null\n        switch(typeof v) {\n            case 'string': return '\"' + v.replace(/\"/g, '\\/\"') + '\"';\n            case 'number': return opts.numberFormat(v);\n            case 'object': return Array.isArray(v) ? 'Array' : 'Object';\n            // all other types have reasonable string representations\n            default: return v;\n        }\n    }\n\n    const results = diff([a, b], opts);\n\n    Object.defineProperties(results, {\n        toString: {\n            isEnumerable: false,\n            value() {\n                const t = new Table();\n\n                for(const diff of this) {\n                    t.cell('Property', chalk[diff.colorHint](diff.key));\n                    t.cell('Equality', diff.result);\n                    t.cell(opts.labels[0], chalk[diff.colorHint](formatValue(diff.values[0])));\n                    t.cell(opts.labels[1], chalk[diff.colorHint](formatValue(diff.values[1])));\n                    t.newRow();\n                }\n\n                return chalk.green('Green: Strictly Equal (===)') + '\\n' +\n                    chalk.yellow('Yellow: Conceptually Equal (courtesy is-equal)') + '\\n' +\n                    chalk.red('Red: Not Equal') + '\\n\\n' +\n                    t.toString();\n            },\n        },\n        toHtml : {\n            isEnumerable: false,\n            value() {\n                return '<table class=\"jsdifflist\">' +\n                    '<thead><tr>' +\n                    '<th>Property</th>' +\n                    '<th>Equality</th>' +\n                    `<th>${opts.labels[0]}</th>` +\n                    `<th>${opts.labels[1]}</th>` +\n                    '</tr></thead>' +\n                    '<tbody>' +\n                    this.map(d => `<tr class=\"jsdifflist-color-${d.colorHint}\">` +\n                        `<td>${escapeHtml(d.key)}</td>` +\n                        `<td>${d.result}</td>` +\n                        `<td>${escapeHtml(formatValue(d.values[0]))}</td>` +\n                        `<td>${escapeHtml(formatValue(d.values[1]))}</td></tr>`).join('') +\n                    '</tbody></table>';\n            },\n        },\n    });\n\n    return results;\n}\n"]}